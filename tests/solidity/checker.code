.version sol 0.71.0

.macro constructor
DROP
GETGLOB 2
ISNULL
IFREF {
	.inline __c4_to_c7_with_init_storage
}
GETGLOB 6
THROWIF 51
ENDS
.loc checker.sol, 29
ACCEPT
.loc checker.sol, 0
CALLREF {
	.inline __c7_to_c4
}
THROW 0

.macro checkData
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	.inline __c4_to_c7
}
.loc checker.sol, 42
LDU 32
LDDICT
ROTREV
PAIR
SWAP
ENDS
.loc checker.sol, 0
CALLREF {
	.inline __checkData_13f36e46_internal_macro
}
CALLREF {
	.inline __c7_to_c4
}
THROW 0

.globl	checkData_13f36e46_internal
.type	checkData_13f36e46_internal, @function
.inline __checkData_13f36e46_internal_macro

.macro checkData_13f36e46_internal_macro
.loc checker.sol, 24
GETGLOB 5
DUP
ISNULL
PUSHCONT {
	DROP
	PUSHINT 0
}
IF
GETGLOB 2
EQUAL
THROWIFNOT 100
.loc checker.sol, 29
ACCEPT
.loc checker.sol, 30
PUSHCONT {
	.loc checker.sol, 43
	ACCEPT
	.loc checker.sol, 44
	DUP
	FIRST
	PUSHCONT {
		.loc checker.sol, 45
		TRUE
		MYADDR
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 12112001070505573100559184388815842756433777146887178
		STUR 175
		STI 1
		ENDC
		PUSHINT 1
		SENDRAWMSG
		.loc checker.sol, 46
		DROP
		.loc checker.sol, 0
	}
	IFNOTJMP
	.loc checker.sol, 48
	TRUE
	SETGLOB 11
	.loc checker.sol, 49
	PUSHINT 0
	SWAP
	MYADDR
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 12042311241760164903241885269213816626727588310923165
	STUR 175
	SWAP
	UNPAIR
	XCHG S2
	STU 32
	STDICT
	STU 128
	ENDC
	PUSHINT 1
	SENDRAWMSG
	.loc checker.sol, 42
}
CALLX
.loc checker.sol, 0

.macro checkDataIndex
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	.inline __c4_to_c7
}
.loc checker.sol, 52
OVER
PUSHCONT {
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
	LDREF
	ENDS
	CTOS
}
PUSHCONT {
	LDU 32
	LDDICT
	ROTREV
	PAIR
	SWAP
}
IFELSE
LDU 128
ENDS
.loc checker.sol, 0
CALLREF {
	.inline __checkDataIndex_b6929abe_internal_macro
}
CALLREF {
	.inline __c7_to_c4
}
THROW 0

.globl	checkDataIndex_b6929abe_internal
.type	checkDataIndex_b6929abe_internal, @function
.inline __checkDataIndex_b6929abe_internal_macro

.macro checkDataIndex_b6929abe_internal_macro
.loc checker.sol, 52
MYADDR
.loc checker.sol, 34
GETGLOB 9
OVER
SDEQ
THROWIFNOT 100
.loc checker.sol, 29
ACCEPT
.loc checker.sol, 30
ROTREV
PUSHCONT {
	.loc checker.sol, 53
	PUSH2 S0, S1
	FIRST
	GEQ
	PUSHCONT {
		.loc checker.sol, 54
		DEC
		UFITS 128
		SWAP
		SECOND
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		CALLREF {
			LDREF
			LDU 256
			ENDS
			PAIR
		}
		SECOND
		SETGLOB 10
		.loc checker.sol, 55
		TRUE
		MYADDR
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 12112001070505573100559184388815842756433777146887178
		STUR 175
		STI 1
		ENDC
		PUSHINT 1
		SENDRAWMSG
		.loc checker.sol, 0
	}
	IFJMP
	.loc checker.sol, 58
	PUSH2 S0, S1
	SECOND
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	CALLREF {
		LDREF
		LDU 256
		ENDS
		PAIR
	}
	FIRST
	CTOS
	.loc checker.sol, 59
	DUP
	LDU 8
	POP S2
	.loc checker.sol, 60
	PUSHINT 247
	SUB
	UFITS 8
	.loc checker.sol, 61
	MULCONST 8
	UFITS 8
	SDSKIPFIRST
	.loc checker.sol, 62
	PUSHINT 8
	SDSKIPFIRST
	.loc checker.sol, 63
	PLDU 256
	.loc checker.sol, 64
	FALSE ; decl return flag
	PUSH S2
	PUSHCONT {
		.loc checker.sol, 73
		PUSH S2
		DEC
		UFITS 128
		PUSH S4
		SECOND
		PUSHINT 32
		DICTUGET
		THROWIFNOT 50
		CALLREF {
			LDREF
			LDU 256
			ENDS
			PAIR
		}
		SECOND
		PUSH S2
		NEQ
		PUSHCONT {
			.loc checker.sol, 74
			FALSE
			MYADDR
			NEWC
			STSLICECONST x62_
			STSLICE
			PUSHINT 12112001070505573100559184388815842756433777146887178
			STUR 175
			STI 1
			ENDC
			PUSHINT 1
			SENDRAWMSG
			.loc checker.sol, 0
		}
		IF
		.loc checker.sol, 0
	}
	PUSHCONT {
		.loc checker.sol, 65
		FALSE ; decl return flag
		GETGLOB 10
		ISNULL
		PUSHCONT {
			.loc checker.sol, 66
			GETGLOB 10
			DUP
			ISNULL
			THROWIF 63
			PUSH S3
			NEQ
			PUSHCONT {
				.loc checker.sol, 67
				FALSE
				MYADDR
				NEWC
				STSLICECONST x62_
				STSLICE
				PUSHINT 12112001070505573100559184388815842756433777146887178
				STUR 175
				STI 1
				ENDC
				PUSHINT 1
				SENDRAWMSG
				.loc checker.sol, 68
				BLKDROP 5
				PUSHINT 4
				.loc checker.sol, 0
			}
			IFJMP
			.loc checker.sol, 0
		}
		IFNOT
		.loc checker.sol, 0
		DUP
		IFRET
		DROP
	}
	IFELSE
	IFRET
	.loc checker.sol, 77
	DROP
	PUSH2 S0, S1
	SECOND
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	CALLREF {
		LDREF
		LDU 256
		ENDS
		PAIR
	}
	FIRST
	KECCAK256
	PUSH2 S1, S2
	SECOND
	PUSHINT 32
	DICTUGET
	THROWIFNOT 50
	CALLREF {
		LDREF
		LDU 256
		ENDS
		PAIR
	}
	SECOND
	NEQ
	PUSHCONT {
		.loc checker.sol, 78
		FALSE
		MYADDR
		NEWC
		STSLICECONST x62_
		STSLICE
		PUSHINT 12112001070505573100559184388815842756433777146887178
		STUR 175
		STI 1
		ENDC
		PUSHINT 1
		SENDRAWMSG
		.loc checker.sol, 79
		DROP2
		.loc checker.sol, 0
	}
	IFJMP
	.loc checker.sol, 81
	INC
	UFITS 128
	SWAP
	MYADDR
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 12042311241760164903241885269213816626727588310923165
	STUR 175
	SWAP
	UNPAIR
	XCHG S2
	STU 32
	STDICT
	STU 128
	ENDC
	PUSHINT 1
	SENDRAWMSG
	.loc checker.sol, 52
}
CALLX
.loc checker.sol, 0
DROP

.macro isCorrect
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	.inline __c4_to_c7
}
.loc checker.sol, 84
LDI 1
ENDS
.loc checker.sol, 0
CALLREF {
	.inline __isCorrect_fd071490_internal_macro
}
CALLREF {
	.inline __c7_to_c4
}
THROW 0

.globl	isCorrect_fd071490_internal
.type	isCorrect_fd071490_internal, @function
.inline __isCorrect_fd071490_internal_macro

.macro isCorrect_fd071490_internal_macro
.loc checker.sol, 34
DROP
GETGLOB 9
MYADDR
SDEQ
THROWIFNOT 100
.loc checker.sol, 29
ACCEPT
.loc checker.sol, 85
FALSE
SETGLOB 11
.loc checker.sol, 0

.macro receive_macro
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	.inline __c4_to_c7
}
.loc checker.sol, 92
GETGLOB 9
MYADDR
SDEQ
PUSHCONT {
	.loc checker.sol, 93
	FALSE
	MYADDR
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 12112001070505573100559184388815842756433777146887178
	STUR 175
	STI 1
	ENDC
	PUSHINT 1
	SENDRAWMSG
	.loc checker.sol, 94
	FALSE
	SETGLOB 11
	.loc checker.sol, 0
}
IF
.loc checker.sol, 0
CALLREF {
	.inline __c7_to_c4
}

.macro on_bounce_macro
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	.inline __c4_to_c7
}
.loc checker.sol, 100
GETGLOB 9
MYADDR
SDEQ
PUSHCONT {
	.loc checker.sol, 101
	FALSE
	MYADDR
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 12112001070505573100559184388815842756433777146887178
	STUR 175
	STI 1
	ENDC
	PUSHINT 1
	SENDRAWMSG
	.loc checker.sol, 102
	FALSE
	SETGLOB 11
	.loc checker.sol, 0
}
IF
.loc checker.sol, 0
CALLREF {
	.inline __c7_to_c4
}

.macro fallback_macro
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	.inline __c4_to_c7
}
.loc checker.sol, 107
GETGLOB 9
MYADDR
SDEQ
PUSHCONT {
	.loc checker.sol, 108
	FALSE
	MYADDR
	NEWC
	STSLICECONST x62_
	STSLICE
	PUSHINT 12112001070505573100559184388815842756433777146887178
	STUR 175
	STI 1
	ENDC
	PUSHINT 1
	SENDRAWMSG
	.loc checker.sol, 109
	FALSE
	SETGLOB 11
	.loc checker.sol, 0
}
IF
.loc checker.sol, 0
CALLREF {
	.inline __c7_to_c4
}

.macro getStatus
DROP
GETGLOB 6
THROWIFNOT 76
GETGLOB 2
ISNULL
IFREF {
	.inline __c4_to_c7
}
.loc checker.sol, 114
ENDS
.loc checker.sol, 0
CALLREF {
	.inline __getStatus_4e69d560_internal_macro
}
PUSH S2
PUSHCONT {
	PUSH S4
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 98
	STZEROES
	REVERSE 2, 1
	STSLICECONST xe0cd6b5f
	XCPU S1, S0
	ISNULL
	PUSHCONT {
		DROP
		STSLICECONST 0
	}
	PUSHCONT {
		SWAP
		STSLICECONST 1
		STU 256
	}
	IFELSE
	STI 1
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	DROP2
}
IFELSE
IFREF {
	.inline __upd_only_time_in_c4
}
THROW 0

.macro getStatus_4e69d560_internal_macro
.loc checker.sol, 115
GETGLOB 10
GETGLOB 11
.loc checker.sol, 0

.macro c4_to_c7
PUSHROOT
CTOS
LDU 256 ; pubkey c4
LDU 64 ; pubkey timestamp c4
LDU 1 ; ctor flag
NIP
LDI 1
SWAP
NULLROTRIFNOT
PUSHCONT {
	LDU 256
}
IF
LDI 1
ENDS
SETGLOB 11
SETGLOB 10
SETGLOB 3
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS
SBITS
GTINT 1
PUSHCONT {
	PUSHINT 0
	PUSHROOT
	CTOS
	PLDDICT ; D
	NULL
	PUSHINT 0
	SETGLOB 11
	SETGLOB 10
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	FALSE
	SETGLOB 11
}
IFREFELSE {
	.inline __c4_to_c7
}

.macro c7_to_c4
GETGLOB 11
GETGLOB 10
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STONE
XCPU S1, S0
ISNULL
PUSHCONT {
	DROP
	STSLICECONST 0
}
PUSHCONT {
	SWAP
	STSLICECONST 1
	STU 256
}
IFELSE
STI 1
ENDC
POPROOT

.macro upd_only_time_in_c4
PUSHROOT
CTOS
LDU 256
LDU 64
NIP
GETGLOB 3
ROT
NEWC
STU 256
STU 64
STSLICE
ENDC
POPROOT

.internal-alias :main_internal, 0
.internal :main_internal
PUSHROOT
CTOS
SBITS
NEQINT 1
SETGLOB 6
PUSH S2
CTOS
LDU 4 ; bounced tail
LDMSGADDR ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
IFJMPREF {
	OVER
	LDSLICE 32
	NIP
	.inline __on_bounce_macro
}
OVER
SEMPTY ; isEmpty
DUP
PUSHCONT {
	DROP
	OVER
	LDUQ 32  ; [funcId] body' ok
	PUSHCONT {
		DROP
		CALLREF {
			.inline __fallback_macro
		}
		THROW 0
	}
	IFNOT
	OVER
	EQINT 0 ; funcId body' isZero
	DUP
	PUSHCONT {
		BLKDROP2 2, 1
	}
	IF
}
IFNOT
IFJMPREF {
	.inline __receive_macro
}
SWAP
CALLREF {
	.inline __public_function_selector
}
DROP2
CALLREF {
	.inline __fallback_macro
}

.internal-alias :main_external, -1
.internal :main_external
PUSHROOT
CTOS
SBITS
NEQINT 1
SETGLOB 6
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
OVER
CALLREF {
	.inline __c4_to_c7_with_init_storage
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHPOW2 9
	LDSLICEX
	DUP
	MYADDR
	NEWC
	STSLICE
	STSLICE
	ENDC
	HASHCU
	SWAP
	LDU 1 ; signatureSlice hashMsgSlice hasPubkey msgSlice
	SWAP
	PUSHCONT {
		LDU 256 ; signatureSlice hashMsgSlice pubkey msgSlice
		XCHG S3
		SWAP
	}
	PUSHCONT {
		XCHG S2
		GETGLOB 2
	}
	IFELSE
	DUP
	SETGLOB 5
	CHKSIGNU
	THROWIFNOT 40
}
PUSHCONT {
	LDU 1 ; hasPubkey msgSlice
	SWAP
	THROWIF 58
}
IFELSE
LDU 64 ; timestamp msgSlice
SWAP
.inline __replay_protection_macro
LDU 32 ; expireAt msgSlice
SWAP
NOW ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU 32 ; funcId body
SWAP
CALLREF {
	.inline __public_function_selector
}
DROP2
CALLREF {
	.inline __fallback_macro
}

.macro public_function_selector
DUP
PUSHINT 1756716863
LEQ
IFJMPREF {
	DUP
	PUSHINT 118863773
	EQUAL
	IFJMPREF {
		.inline __checkDataIndex
	}
	DUP
	PUSHINT 154827786
	EQUAL
	IFJMPREF {
		.inline __isCorrect
	}
	DUP
	PUSHINT 1624075103
	EQUAL
	IFJMPREF {
		.inline __getStatus
	}
	DUP
	PUSHINT 1756716863
	EQUAL
	IFJMPREF {
		.inline __constructor
	}
}
DUP
PUSHINT 1806547597
EQUAL
IFJMPREF {
	.inline __checkData
}

